name: Django CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  code-check:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

      postgres:
        image: postgres:16.3
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: "stock_db"
        ports: ['5432:5432']
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache Poetry Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-

      - name: Configure Poetry Environment
        run: poetry env use python3

      - name: Install Dependencies
        run: poetry install --with dev

      - name: Wait for PostgreSQL and Redis
        run: |
          echo "Waiting for PostgreSQL and Redis to be ready..."
          for i in {1..10}; do
            if PGPASSWORD=${{ secrets.POSTGRES_PASSWORD }} psql -h localhost -U ${{ secrets.POSTGRES_USER }} -d stock_db -c '\q' 2>/dev/null && redis-cli -h localhost ping | grep PONG; then
              echo "PostgreSQL and Redis are ready!"
              break
            fi
            echo "Services not ready yet..."
            sleep 2
          done

      - name: Run Linter
        run: poetry run task lint

  test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

      postgres:
        image: postgres:16.3
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: stock_db
        ports: 
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache Poetry Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-

      - name: Configure Poetry Environment
        run: |
          poetry env use python3
          poetry env info

      - name: Install Dependencies
        run: poetry install --with dev

      - name: Wait for PostgreSQL
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..10}; do
            if PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d stock_db -c '\q' 2>/dev/null; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "PostgreSQL not ready yet..."
            sleep 2
          done

      - name: Validate Environment Variables
        run: |
          echo "Environment validation successful!"

      - name: Run Tests
        env:
          DJANGO_SETTINGS_MODULE: app.settings
          SECRET_KEY: "test-key-Django-1234556789"
          DEBUG: "False"
          ALLOWED_HOSTS: "127.0.0.1"
          POSTGRES_DB: "stock_db"
          POSTGRES_USER: "postgres"
          POSTGRES_PASSWORD: "postgres"
          POSTGRES_HOST: "localhost"
          POSTGRES_PORT: "5432"
          REDIS_HOST: "localhost"
          REDIS_PORT: "6379"
          REDIS_DB: "1"
          REDIS_PASSWORD: "redis"
          REDIS_USERNAME: "default"
        run: |
          echo "Running migrations..."
          poetry run python manage.py makemigrations
          poetry run python manage.py migrate
          echo "Starting tests..."
          poetry run task test

  validate-docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Validate docker-compose
        run: docker compose config

      - name: Build Docker images
        run: docker compose build

      - name: Test Docker containers
        run: |
          docker compose up -d
          sleep 10
          docker compose ps
          docker compose logs
          docker compose down
