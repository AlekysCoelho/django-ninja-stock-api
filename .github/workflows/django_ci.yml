name: Django CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  code-check:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

      postgres:
        image: postgres:16.3
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: "stock_db"
        ports: ['5432:5432']
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"
          cache: "poetry"

      - name: Install Poetry
        run: |
          pip install --user poetry
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          export PATH="$HOME/.local/bin:$PATH"

      - name: Install Dependencies
        run: poetry install --with dev

      - name: Wait for PostgreSQL and Redis
        run: |
          echo "Waiting for PostgreSQL and Redis to be ready..."
          for i in {1..10}; do
            if PGPASSWORD=${{ secrets.POSTGRES_PASSWORD }} psql -h localhost -U ${{ secrets.POSTGRES_USER }} -d stock_db -c '\q' 2>/dev/null && redis-cli -h localhost ping | grep PONG; then
              echo "PostgreSQL and Redis are ready!"
              break
            fi
            echo "Services not ready yet..."
            sleep 2
          done

      - name: Run Linter
        run: poetry run task lint

  test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

      postgres:
        image: postgres:16.3
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: "test_db"
        ports: ['5432:5432']
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"
          cache: "poetry"

      - name: Install Poetry
        run: |
          pip install --user poetry
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          export PATH="$HOME/.local/bin:$PATH"

      - name: Install Dependencies
        run: poetry install --with dev

      - name: Wait for PostgreSQL
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..10}; do
            if PGPASSWORD=${{ secrets.POSTGRES_PASSWORD }} psql -h localhost -U ${{ secrets.POSTGRES_USER }} -d stock_db -c '\q' 2>/dev/null; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "PostgreSQL not ready yet..."
            sleep 2
          done

      - name: Run Tests
        env:
          DJANGO_SETTINGS_MODULE: app.settings
          SECRET_KEY: ${{ secrets.DJ_SECRET_KEY }}
          DEBUG: "False"
          ALLOWED_HOSTS: "127.0.0.1"
          POSTGRES_DB: ${{env.POSTGRES_DB}}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_HOST: ${{env.POSTGRES_HOST}}
          POSTGRES_PORT: ${{env.POSTGRES_PORT}}
          REDIS_HOST: ${{env.REDIS_HOST}}
          REDIS_PORT: ${{env.REDIS_PORT}}
          REDIS_DB: ${{env.REDIS_DB}}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          REDIS_USERNAME: ${{ secrets.REDIS_USERNAME }}
        run: poetry run task test

  validate-docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Validate docker-compose
        run: docker-compose config

      - name: Build Docker images
        run: docker-compose build

      - name: Test Docker containers
        run: |
          docker-compose up -d
          sleep 10
          docker-compose ps
          docker-compose logs
          docker-compose down
